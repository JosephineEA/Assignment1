#add all your packages here
Sys.setlocale("LC_ALL", "English")
library(data.table)
library(dplyr)
library(kableExtra)
library(pROC)
library(caret)
library(knitr)
#Answer in this chunk
# Convert 2 files to data table format
longegfr1 <- fread("data_assignment1/longegfr1.csv", stringsAsFactors = F)
longegfr2 <- fread("data_assignment1/longegfr2.csv", stringsAsFactors = F)
# Search the merging way
output <- data.frame(longegfr1.col.name =  names(longegfr1))
kable(output,"markdown")
output <- data.frame(longegfr2.col.name =  names(longegfr2))
kable(output,"markdown")
# further exploration for ID and fu.years variables
output <- data.frame(
dataset = c("in longegfr1 not in longegfr2",
"in longegfr2 not in longegfr1"),
id = c(length(longegfr1[!id %in% longegfr2$ID]$id),
length(longegfr2[!ID %in% longegfr1$id]$ID)),
fu.years = c(length(longegfr1[!fu.years %in%
longegfr2$fu.years]$fu.years),
length(longegfr2[!fu.years %in%
longegfr1$fu.years]$fu.years))
)
kable(output,"markdown")
# Merge 2 subjects
longegfr <- merge(longegfr1,longegfr2,by.x = c("id","fu.years"),
by.y = c("ID","fu.years"),all = T)
# order observations according to 2 certain variables
longegfr <- longegfr[order(id,fu.years)]
# print first 10 values
head(longegfr,10)
#Answer in this chunk
# Compute the average eGFR and length of follow-up for each patient.
eGFR_fu <- longegfr[,as.list(
c(.(fu_length = max(fu.years)-min(fu.years)),
.(egfr_mean = mean(egfr,na.rm = T)))),
by=list(id,sex,baseline.age)]
# print first 10 values of the new dataset
head(eGFR_fu,10)
# Tabulate the number of patients with average eGFR in the following ranges
cut_points <- c(seq(0,30,15),seq(60,90,30),Inf)
Tab_eGFR <- cut(eGFR_fu$egfr_mean,breaks = cut_points, right = T)
table(Tab_eGFR)
# Count and report the number of patients with missing average eGFR
sum(is.na(eGFR_fu$egfr_mean))
#Answer in this chunk
# collect id,sex,age,average eGFR,last.eGFR and number of eGFR measurement
# here I consider the last reading sGFR not be "NA"
# initialize a new data.frame
eGFR_high <- data.frame(matrix(ncol = 6, nrow = 0))
# add needed records
for(i in eGFR_fu[egfr_mean>90]$id){
new_row <- c(i,
eGFR_fu[id == i]$sex,
eGFR_fu[id == i]$baseline.age,
eGFR_fu[id == i]$egfr_mean,
last(longegfr[id == i]$egfr,na_rm = T),
table(longegfr[id == i]$id))
eGFR_high <- rbind(eGFR_high,new_row)
}
# rename column names for the new data.frame
colnames(eGFR_high) <- c("id","sex","age","mean.eGFR","last.eGFR","measure.num")
# print the summary of the new dataset
summary(eGFR_high)
#Answer in this chunk
# collect id,sex,age,average eGFR,last.eGFR and number of eGFR measurement
# here I consider the last reading sGFR not be "NA"
# initialize a new data.frame
eGFR_high <- data.frame(matrix(ncol = 6, nrow = 0))
# add needed records
for(i in eGFR_fu[egfr_mean>90]$id){
new_row <- c(i,
eGFR_fu[id == i]$sex,
eGFR_fu[id == i]$baseline.age,
eGFR_fu[id == i]$egfr_mean,
last(longegfr[id == i]$egfr,na_rm = T),
table(longegfr[id == i]$id))
eGFR_high <- rbind(eGFR_high,new_row)
}
# rename column names for the new data.frame
colnames(eGFR_high) <- c("id","sex","age","mean.eGFR","last.eGFR","measure.num")
# print the summary of the new dataset
kable(summary(eGFR_high))
#Answer in this chunk
# collect id,sex,age,average eGFR,last.eGFR and number of eGFR measurement
# here I consider the last reading sGFR not be "NA"
# initialize a new data.frame
eGFR_high <- data.frame(matrix(ncol = 6, nrow = 0))
# add needed records
for(i in eGFR_fu[egfr_mean>90]$id){
new_row <- c(i,
eGFR_fu[id == i]$sex,
eGFR_fu[id == i]$baseline.age,
eGFR_fu[id == i]$egfr_mean,
last(longegfr[id == i]$egfr,na_rm = T),
table(longegfr[id == i]$id))
eGFR_high <- rbind(eGFR_high,new_row)
}
# rename column names for the new data.frame
colnames(eGFR_high) <- c("id","sex","age","mean.eGFR","last.eGFR","measure.num")
# print the summary of the new dataset
summary(eGFR_high)
# define a plot function to plot eGFR based on time
plot.eGFR <- function(patient.id){
# collect data we need
patient <- longegfr[id==patient.id,c("fu.years","egfr")]
# plot the original data
par(mar = c(3.8,3.8,1.4,1))
plot(patient$fu.years,patient$egfr,
main=paste("Patient",patient.id),cex.main=1,
xlab = "time",ylab = "eGFR",cex.lab=1,cex.axis = 0.6,
pch=16,cex=0.5)
# plot the regression line
abline(lm(patient$egfr~patient$fu.years),col="blue")
# plot the regression line without extreme value
patient <- patient[-c(which.min(patient$egfr),which.max(patient$egfr)),]
abline(lm(patient$egfr~patient$fu.years),col="red")
# add legend
legend("topright", legend = c("real data", "regression", "new regression"),
col = c("black", "blue","red"), lwd = 2, cex = 0.3,bty = 1)
}
# plot for certain patients
opar <- par(mfrow=c(2,2),mar=c(3.8,3.8,1.4,1))
for(i in c(3,37,162,223)){
plot.eGFR(i)
}
# calculate the 95% confidence intervals
for(i in c(3,37,162,223)){
patient <- longegfr[id==i,c("fu.years","egfr")]
# colnames(patient) <- c("time","eGFR")
model <- lm(egfr~fu.years,patient)
ci <- confint(model,level = 0.95)
# print(paste("Patient",i,":",sep = ""))
# print(ci)
knitr::kable(ci,"markdown")
}
knitr::kable(ci,"markdown")
# calculate the 95% confidence intervals
for(i in c(3,37,162,223)){
patient <- longegfr[id==i,c("fu.years","egfr")]
# colnames(patient) <- c("time","eGFR")
model <- lm(egfr~fu.years,patient)
ci <- confint(model,level = 0.95)
print(paste("Patient",i,":",sep = ""))
print(ci)
}
# calculate the 95% confidence intervals
for(i in c(3,37,162,223)){
patient <- longegfr[id==i,c("fu.years","egfr")]
# colnames(patient) <- c("time","eGFR")
model <- lm(egfr~fu.years,patient)
ci <- confint(model,level = 0.95)
print(paste("Patient",i,":",sep = ""),ci)
# print(ci)
}
# calculate the 95% confidence intervals
for(i in c(3,37,162,223)){
patient <- longegfr[id==i,c("fu.years","egfr")]
# colnames(patient) <- c("time","eGFR")
model <- lm(egfr~fu.years,patient)
ci <- confint(model,level = 0.95)
print(paste("Patient",i,":",sep = "")&&ci)
# print(ci)
}
# calculate the 95% confidence intervals
for(i in c(3,37,162,223)){
patient <- longegfr[id==i,c("fu.years","egfr")]
# colnames(patient) <- c("time","eGFR")
model <- lm(egfr~fu.years,patient)
ci <- confint(model,level = 0.95)
print(paste("Patient",i,":",sep = ""))
# print(ci)
}
# calculate the 95% confidence intervals
for(i in c(3,37,162,223)){
patient <- longegfr[id==i,c("fu.years","egfr")]
# colnames(patient) <- c("time","eGFR")
model <- lm(egfr~fu.years,patient)
ci <- confint(model,level = 0.95)
print(paste("Patient",i,":",sep = ""))
print(ci)
}
#Answer in this chunk
# load scr.csv file
scr.data <- fread("data_assignment1/scr.csv", stringsAsFactors = F)
# Examine a summary of the distribution of serum creatinine
summary(scr.data$scr)
# Report the inter-quartile range.
IQR(scr.data$scr,na.rm = T)
# covert abnormal value
scr.covert <- scr.data
bound <- quantile(scr.data$scr,0.75,na.rm = T)+1.5*IQR(scr.data$scr,na.rm = T)
scr.covert$scr <- ifelse(scr.covert$scr>=bound,scr.covert$scr/88.4,scr.covert$scr)
# examine the distribution of serum creatinine
opar <- par(mfrow=c(2,2),mar=c(3.8,3.8,1.4,1))
boxplot(scr.data$scr, main = "Original")
boxplot(scr.covert$scr, main = "Converted")
hist(scr.data$scr,xlab = "SCR", ylab = "",main = "")
hist(scr.covert$scr,xlab = "SCR" ,ylab = "",main = "")
# ---- Compute eCFR according to 2 equations using ---- #
# initialize a data.frame to save results
Estimate.eGFR <- data.frame(matrix(ncol = 3, nrow = 0))
for(i in 1:nrow(scr.covert)){
if(complete.cases(scr.covert[i, ])){
# Equation1: MDRD4
MDRD4 <- 175*(scr.covert$scr[i]^(-1.154))*
(scr.covert$age[i]^(-0.203))*
ifelse(scr.covert$sex[i] == "Female",0.742,1)*
ifelse(scr.covert$ethnic[i] =="Black",1.212,1)
# Equation2: CKD-EPI
k <- ifelse(scr.covert$sex[i]=="Female",0.7,0.9)
alpha <- ifelse(scr.covert$sex[i]=="Female",-0.329,-0.411)
CKD_EPI <- 141*min(scr.covert$scr[i]/k,1)^(alpha)*
max(scr.covert$scr[i]/k,1)^(-1.209)*
(0.993^(scr.covert$age[i]))*
ifelse(scr.covert$sex[i] == "Female",1.018,1)*
ifelse(scr.covert$ethnic[i] == "Black",1.159,1)
}else{
# for rows with Not Available reocord(s)
MDRD4 <- NA
CKD_EPI <- NA
}
new_row <- data.frame(i,MDRD4,CKD_EPI)
Estimate.eGFR <- rbind(Estimate.eGFR,new_row)
}
# rename column names
colnames(Estimate.eGFR) <- c("i","MDRD4","CKD_EPI")
# ---- Report mean, standard value, Pearson correlation coefficient ---- #
# report mean, standard deviation and Pearson correlation coefficient
output <- data.frame(
method = c("MRD4","CKD_EPI"),
mean = c(round(mean(Estimate.eGFR$MDRD4,na.rm = T),2),
round(mean(Estimate.eGFR$CKD_EPI,na.rm = T),2)),
standard.value = c(round(sd(Estimate.eGFR$MDRD4,na.rm = T),2),
round(sd(Estimate.eGFR$CKD_EPI,na.rm = T),2)),
Pearson.correlation = c(round(cor(na.omit(Estimate.eGFR[,2]),
na.omit(Estimate.eGFR[,3]),
method = "pearson"),2),
round(cor(na.omit(Estimate.eGFR[,3]),
na.omit(Estimate.eGFR[,2]),
method = "pearson"),2))
)
kable(output, "markdown")
# ---- Report same quantities caccording to strata of MDRD4 eGFR---- #
# : $(0-60)$, $(60-90)$ and $(> 90)$.
output <- data.frame(matrix(ncol = 5, nrow = 0))
t <- 0
for(m in c(60,90,1000)){
group <- subset(Estimate.eGFR,MDRD4<=m & MDRD4 > t)
p.cor <- round(cor(na.omit(group$MDRD4),na.omit(group$CKD_EPI)),2)
for(j in c("MDRD4","CKD_EPI")){
new_row <- c(paste("(",t,",",i,")"),
j,
round(mean(group[,j]),2),
round(sd(group[,j]),2),
p.cor)
output <- rbind(output,new_row)
}
t <- m
}
colnames(output) <- c("Group","Method","Mean",
"Standard.value","Pearson.cor")
kable(output, "markdown")
# ---- Report same quantities caccording to strata of MDRD4 eGFR---- #
output <- data.frame(matrix(ncol = 5, nrow = 0))
t <- 0
for(m in c(60,90,1000)){
group <- subset(Estimate.eGFR,MDRD4<=m & MDRD4 > t)
p.cor <- round(cor(na.omit(group$MDRD4),na.omit(group$CKD_EPI)),2)
for(j in c("MDRD4","CKD_EPI")){
new_row <- c(paste("(",t,",",i,")"),
j,
round(mean(group[,j]),2),
round(sd(group[,j]),2),
p.cor)
output <- rbind(output,new_row)
}
t <- m
}
colnames(output) <- c("Group","Method","Mean",
"Standard.value","Pearson.cor")
kable(output, "markdown")
# ---- Print first 15 values for both datasets---- #
head(Estimate.eGFR[2:3],15)
#Answer in this chunk
plot(Estimate.eGFR$MDRD4,Estimate.eGFR$CKD_EPI,type="p",
ylab="CKD_EPI",xlab="MDRD4",
main="eGFR in 2 method",col ="black")
# Add median and quantile lines for CKD_EPI
abline(h = median(na.omit(Estimate.eGFR$CKD_EPI)), col = "red")
abline(h = quantile(na.omit(Estimate.eGFR$CKD_EPI), 0.25), col = "blue")
abline(h = quantile(na.omit(Estimate.eGFR$CKD_EPI), 0.75), col = "green")
# Add median and quantile lines for MDRD4
abline(v = median(na.omit(Estimate.eGFR$MDRD4)),col = "red")
abline(v = quantile(na.omit(Estimate.eGFR$MDRD4), 0.25),col = "blue")
abline(v = quantile(na.omit(Estimate.eGFR$MDRD4), 0.75), col = "green")
# Add lengend
legend("topright", legend = c( "median", "Q1","Q3"),
col = c("red","blue","green"), lwd = 2, cex = 0.4,bty = 1)
#Answer in this chunk
# load 3 files
cohort <- fread("data_assignment1/cohort.csv", stringsAsFactors = T)
lab1 <- fread("data_assignment1/lab1.csv", stringsAsFactors = T)
linker <- fread("data_assignment1/linker.csv", stringsAsFactors = F)
# merge 3 files to a single data table
cohort.dt <- merge(merge(lab1,linker,by.x = c("LABID"),
by.y = c("LABID"),all = T),
cohort ,by.x = c("id"),
by.y = c("id"),all = T)
# check all identifiers in cohort.csv have been accounted for in the final table
check_ids <- setdiff(cohort$id,cohort.dt$id)
print(length(check_ids))
# drop the identifier that originated from lab1.csv dataset LABID.
cohort.dt <- subset(cohort.dt, select = -c(LABID))
# check if 2 yob are equal
for(i in 1:length(cohort.dt$id)){
if(cohort.dt$yob.x[i] != cohort.dt$yob.y[i]){
print(paste("notice",i))
}
}
# Ensure that a single yob field remains and rename it to yob
cohort.dt <- subset(cohort.dt, select = -c(yob.y))
setnames(cohort.dt, "yob.x", "yob")
# Ensure that the albumin field is converted to a factor and the ordering of the factor is 1=“normo”, 2=“micro”, 3=“macro”.
cohort.dt$albumin <- factor(cohort.dt$albumin,
levels = c("normo","micro","macro"),labels = c(1,2,3))
# Print first 10 values of the new dataset using head().
head(cohort.dt,10)
#Answer in this chunk
# Create a copy of the dataset where you will impute all missing values.
cohort.dt.imputed <- cohort.dt %>% copy()
# Update any missing age fields using the year of birth
# calculate a base year
for(i in 1:length(cohort.dt.imputed$id)){
if(!(is.na(cohort.dt.imputed$yob[i]) &is.na(cohort.dt.imputed$age[i]))){
base_year <- cohort.dt.imputed$yob[i] + cohort.dt.imputed$age[i]
break
}
}
# impute age
cohort.dt.imputed <- cohort.dt.imputed[,age:=ifelse(is.na(age),base_year-yob,age)]
# writing a single function called impute.to.mean()
impute.to.mean <- function(dataset){
mean <- mean(dataset,na.rm = T)
dataset <- ifelse(is.na(dataset),mean,dataset)
return(dataset)}
# writing a single function called impute.to.mode()
impute.to.mode <- function(dataset){
mode <- as.numeric(names(table(dataset)[which.max(table(dataset))]))
dataset <- ifelse(is.na(dataset),mode,dataset)
dataset <- factor(dataset)
return(dataset)}
# impute missing values (mean)
cohort.dt.imputed$urea <- impute.to.mean(cohort.dt.imputed$urea)
cohort.dt.imputed$creatinine <- impute.to.mean(cohort.dt.imputed$creatinine)
cohort.dt.imputed$bp <- impute.to.mean(cohort.dt.imputed$bp)
cohort.dt.imputed$glucose <- impute.to.mean(cohort.dt.imputed$glucose)
# impute missing values (mode)
cohort.dt.imputed$diabetes <- impute.to.mode(cohort.dt.imputed$diabetes)
cohort.dt.imputed$albumin <- impute.to.mode(cohort.dt.imputed$albumin)
# I used to write the function in this code block, however I find that "diabetes"
# is a 0-1 variable, and we cannot use a R function t distinguish it.
# Therefore I change my answer which is showed in the upper code block.
# impute.to.mean <- function(dataset){
#   for(i in 1:ncol(dataset)){
#     if(is.numeric(dataset[[i]])){
#       if(sum(is.na(dataset[[i]])>0)){
#         impute.mean <- mean(dataset[[i]],na.rm = T)
#         dataset[[i]] <- ifelse(is.na(dataset[[i]]),impute.mean,dataset[[i]])
#       }
#     }else{
#       if(sum(is.na(dataset[[i]])>0)){
#         mode <- as.numeric(names(table(dataset)[which.max(table(dataset))]))
#         dataset[[i]] <- ifelse(is.na(dataset[[i]]),mode,dataset[[i]])
#         dataset[[i]] <- factor(dataset[[i]])
#       }
#     }
#   }
#   return(dataset)
# }
# Print first 15 values of the new dataset using head().
head(cohort.dt.imputed,15)
# Compare each distribution of the imputed and non-imputed variables and decide which ones to keep for further analysis.
for(i in c("urea","glucose","bp","creatinine","age")){
par(mfrow = c(1,2))
hist(cohort.dt[[i]], xlab = i, main = "original data")
hist(cohort.dt.imputed[[i]], xlab = i, main = "imputed")
}
for(i in c("diabetes","albumin")){
par(mfrow = c(1,2))
hist(as.numeric(cohort.dt[[i]]), xlab = i, main = "original data")
hist(as.numeric(cohort.dt.imputed[[i]]), xlab = i, main = "imputed")
}
#Answer in this chunk
# Plot a single figure containing boxplots of potential predictors for diabetes
par(mfrow=c(1,5))
# boxplot(cohort.dt.imputed$yob ~ cohort.dt.imputed$diabetes)
for(k in colnames(cohort.dt.imputed[,-c("diabetes","yob","id","albumin")])){
boxplot(cohort.dt.imputed[,get(k)] ~ cohort.dt.imputed$diabetes,
main = k, xlab = "diabetes",ylab = "")
}
# For any categorical variables create a table instead.
cate.var <- table(cohort.dt.imputed$albumin,cohort.dt.imputed$diabetes)
cate.var
barplot(cate.var, beside=TRUE, legend=TRUE,
main = "albumin in diiferent levels of diabetes",
ylim=c(0, 200),
ylab = "albumin frequency",
xlab = "diabetes",
col=c("orange","green","blue"))
#Answer in this chunk
# findings from the previous exercise: urea, glucose and age
# fit an appropriate model of diabetes with two predictors.
regr.dia.au <-glm(diabetes ~ age+urea, data = cohort.dt.imputed,
family = binomial(link="logit"))
# Print a summary
summary(regr.dia.au)
install.packages("prettydoc")
